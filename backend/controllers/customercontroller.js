const db = require("../config/db");

const getCustomers = (req, res) => {
    const query = 'SELECT username, email, phone FROM Customer ORDER BY customer_id';
    db.query(query, (err, results) => {
        if (err) {
            console.error('Error fetching customer data:', err);
            res.status(500).json({ error: 'Failed to fetch customers' });
            return;
        }
        res.json(results);
    });
};

const saveAddress = (req, res) => {
    const { addressLine1, addressLine2, city, province, postalCode } = req.body;
    const customer_id = req.user.customer_id;

    console.log("Request body:", req.body);
    console.log("Customer ID:", customer_id);

    if (!customer_id) {
        return res.status(400).json({ error: "Customer ID is required" });
    }

    // Check if the user already has a saved address
    const checkAddressQuery = `
        SELECT Address_id, address_line1, address_line2, city, province, postal_code
        FROM addresses
        WHERE Customer_id = ?
        ORDER BY created_at DESC
        LIMIT 1
    `;

    db.query(checkAddressQuery, [customer_id], (err, results) => {
        if (err) {
            console.error("Error checking existing address:", err);
            return res.status(500).json({ error: "Failed to check existing address" });
        }

        if (results.length > 0 && !addressLine1 && !city && !province && !postalCode) {
            // Return the existing address if no new address data is provided
            return res.status(200).json({ message: "Address already exists", address: results[0] });
        }

        // Validate required fields for new address
        if (!addressLine1 || !city || !province || !postalCode) {
            return res.status(400).json({ error: "All required fields must be provided" });
        }

        // Insert new address (Address_id will be generated by the trigger)
        const insertAddressQuery = `
            INSERT INTO addresses (Customer_id, address_line1, address_line2, city, province, postal_code)
            VALUES (?, ?, ?, ?, ?, ?)
        `;
        const values = [
            customer_id,
            addressLine1,
            addressLine2 || "", // Prevent undefined
            city,
            province,
            postalCode
        ];

        db.query(insertAddressQuery, values, (err, results) => {
            if (err) {
                console.error("Error saving address:", err);
                return res.status(500).json({ error: "Failed to save address" });
            }
            // Fetch the newly inserted address to return it
            db.query(checkAddressQuery, [customer_id], (err, newAddress) => {
                if (err) {
                    console.error("Error fetching new address:", err);
                    return res.status(500).json({ error: "Failed to fetch new address" });
                }
                res.status(201).json({
                    message: "Address saved successfully",
                    address: newAddress[0]
                });
            });
        });
    });
};

const updateAddress = (req, res) => {
    const { addressLine1, addressLine2, city, province, postalCode } = req.body;
    const customer_id = req.user.customer_id;

    console.log("Request body:", req.body);
    console.log("Customer ID:", customer_id);

    if (!customer_id) {
        return res.status(400).json({ error: "Customer ID is required" });
    }

    if (!addressLine1 || !city || !province || !postalCode) {
        return res.status(400).json({ error: "All required fields must be provided" });
    }

    // Check for existing address
    const checkAddressQuery = `
        SELECT Address_id
        FROM addresses
        WHERE Customer_id = ?
        ORDER BY created_at DESC
        LIMIT 1
    `;

    db.query(checkAddressQuery, [customer_id], (err, results) => {
        if (err) {
            console.error("Error checking existing address:", err);
            return res.status(500).json({ error: "Failed to check existing address" });
        }

        if (results.length > 0) {
            // Update the existing address
            const updateAddressQuery = `
                UPDATE addresses
                SET address_line1 = ?, address_line2 = ?, city = ?, province = ?, postal_code = ?
                WHERE Address_id = ?
            `;
            const values = [
                addressLine1,
                addressLine2 || "", // Prevent undefined
                city,
                province,
                postalCode,
                results[0].Address_id
            ];

            db.query(updateAddressQuery, values, (err, updateResults) => {
                if (err) {
                    console.error("Error updating address:", err);
                    return res.status(500).json({ error: "Failed to update address" });
                }
                res.status(200).json({ message: "Address updated successfully" });
            });
        } else {
            // Insert new address if none exists
            const insertAddressQuery = `
                INSERT INTO addresses (Customer_id, address_line1, address_line2, city, province, postal_code)
                VALUES (?, ?, ?, ?, ?, ?)
            `;
            const values = [
                customer_id,
                addressLine1,
                addressLine2 || "", // Prevent undefined
                city,
                province,
                postalCode
            ];

            db.query(insertAddressQuery, values, (err, insertResults) => {
                if (err) {
                    console.error("Error inserting new address:", err);
                    return res.status(500).json({ error: "Failed to save new address" });
                }
                res.status(201).json({ message: "Address created successfully" });
            });
        }
    });
};

const deleteCustomer = (req, res) => {
    const customer_id = req.params.customer_id; // Extract Customer_id from the request parameters

    if (!customer_id) {
        return res.status(400).json({ error: "Customer ID is required" });
    }

    // Query to delete the customer
    const deleteCustomerQuery = `
        DELETE FROM Customer
        WHERE Customer_id = ?
    `;

    db.query(deleteCustomerQuery, [customer_id], (err, results) => {
        if (err) {
            console.error("Error deleting customer:", err);
            return res.status(500).json({ error: "Failed to delete customer" });
        }

        if (results.affectedRows === 0) {
            return res.status(404).json({ error: "Customer not found" });
        }

        res.status(200).json({ message: "Customer deleted successfully" });
    });
};

module.exports = {
    getCustomers,
    saveAddress,
    updateAddress,
    deleteCustomer, // Add the new function here
};
